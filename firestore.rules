
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read their own profile, but anyone can create a user document (for signup).
    // Any authenticated user can list user profiles to find users by email for invites.
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
    }

    // A user can read/write to a workspace's subcollections (boards, groups, tasks)
    // only if they are a member of the specific board being accessed.
    match /workspaces/{workspaceId} {

      function isBoardMember(boardId) {
        return get(/databases/$(database)/documents/workspaces/$(workspaceId)/boards/$(boardId)).data.members[request.auth.uid] != null;
      }

      // Allow reading/writing to a board if the user is a member of that board.
      match /boards/{boardId} {
        allow read, write: if isBoardMember(boardId);
      }

      // Allow listing/reading groups if the request is scoped by a boardId the user is a member of.
      match /groups/{groupId} {
         allow read, write: if isBoardMember(request.resource.data.boardId) || isBoardMember(resource.data.boardId);
      }

      // Allow listing/reading tasks if the request is scoped by a boardId the user is a member of.
      match /tasks/{taskId} {
        allow read, write: if isBoardMember(request.resource.data.boardId) || isBoardMember(resource.data.boardId);
        
        match /comments/{commentId} {
            allow read: if isBoardMember(get(/databases/$(database)/documents/workspaces/$(workspaceId)/tasks/$(taskId)).data.boardId);
            allow create: if request.auth.uid == request.resource.data.authorId && isBoardMember(get(/databases/$(database)/documents/workspaces/$(workspaceId)/tasks/$(taskId)).data.boardId);
            allow update, delete: if request.auth.uid == resource.data.authorId && isBoardMember(get(/databases/$(database)/documents/workspaces/$(workspaceId)/tasks/$(taskId)).data.boardId);
        }
      }
    }
  }
}
